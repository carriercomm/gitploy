{"name":"GitPloy","tagline":"Use GitLab with GitPloy to build your own self contained Beanstalk clone. Still WIP, though","body":"# GitPloy\r\n\r\nGitPloy enables you to build your own self-contained versioning and deployment system. Backed by [Django](https://www.djangoproject.com/) it seamlessly integrates with your GitLab installation and allows you to host your repositories and push changes directly to your staging or production servers, either via remote execution of shell scripts or FTP synchronization. Deployment Hooks is inspired by Beanstalk. \r\n\r\n\r\nInstallation\r\n============\r\n\r\nSince GitPloy runs with Django, the setup follows the standard steps like a normal Django installation. I made good experiences with a stack of [nginx](http://nginx.org/), [supervisor](http://supervisord.org/) and [gunicorn](http://gunicorn.org/).\r\n\r\nThe following instruction is written for Ubuntu, but I'm sure it is very similar to other Linux distributions.\r\n\r\n\r\nInstalling the stack\r\n--------------------\r\n\r\nInstall gitlab following this instruction.\r\n[https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md](https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md)\r\n\r\n\t\r\n\r\nInstall nginx\r\n\r\n\tsudo apt-get install nginx\t\r\n\t\r\nInstall the python-dev package\r\n\t\r\n\tsudo apt-get install python-dev\r\n\t\r\nInstall PIP, the package manager for python. [Read the original instruction](http://pip.readthedocs.org/en/latest/installing.html)\r\n\t\r\n\tmkdir downloads\r\n\twget https://bootstrap.pypa.io/get-pip.py\r\n\tsudo python get-pip.py\r\n\t\r\nInstall supervisor and [virtualenv](https://virtualenv.pypa.io/en/latest/)\r\n\r\n\tsudo apt-get install supervisor\r\n\tsudo pip install virtualenv\r\n\t\r\n\r\n\t\r\n\r\n\r\nCreate a System User\r\n--------------------\r\n\r\nOk, you have the basics now, let's create a system user and a ssh key. Chose the default settings for the ssh key.\r\n\r\n\tsudo adduser --disabled-login --gecos 'GitPloy' gitploy\r\n\tsudo su gitploy\r\n\tssh-keygen -t rsa\r\n\t\r\nWe also need to disable host-key checking for your repository machine.\r\n\r\n\techo -e \"Host git.YOUR_COMPANY.org\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\r\n\t\r\n\t\r\nGet the Latest GitPloy \r\n----------------------\r\n\t\r\nWe store all the GitPloy files in our new user's home directory\r\n\r\n\tcd ~\r\n\tmkdir gitploy\r\n\tcd gitploy\r\n\t\r\n\tgit clone https://github.com/felixkosmalla/gitploy.git .\r\n\tgit checkout 1-0-stable\r\n\r\n\t\r\nCreate a Virtual Environment and Activate it\r\n--------------------------------------------\r\n\t\r\n\tcd ~\r\n\tvirtualenv env\r\n\tsource env/bin/activate\r\n\r\n\r\n\t\r\nInstall the Requirements\r\n------------------------\r\n\r\nYour virtual environment still has to be activated\r\n\r\n\tcd ~\r\n\tcd gitploy\r\n\tpip install --pre -r requirements.txt\r\n\t\r\n\r\nInstall a Database\r\n------------------\r\nIf you want, you can install a database like Postgres or MySQL but you can also run the installation on Sqlite which is the default setting. For this you have to do nothing.\r\n\r\nTODO: Postgres installation\r\n\r\n\r\nEdit You Local Settings\r\n-----------------------\r\n\t\r\n\tcd ~\r\n\tcd gitploy\r\n\tcd gitlab_deployment\r\n\tcp settings_local_template.py settings_local.py\r\n\teditor settings_local.py\r\n\t\r\nYou can find out your public key by doing\r\n\r\n\tcat ~/.ssh/id_rsa.pub\r\n\t\r\n\r\n\r\nCreate Some Directories\r\n-----------------------\r\n\r\n\tcd ~\r\n\tmkdir repositories\r\n\tmkdir document_root\r\n\tmkdir document_root/static\r\n\tmkdir logs\r\n\t\r\n\ttouch logs/supervisor.log\r\n\ttouch logs/supervisor_stdout.log\r\n\ttouch logs/supervisor_stderr.log\r\n\ttouch logs/nginx_access.log\r\n\ttouch logs/nginx_error.log\r\n\t\r\n\r\nSetup your Database and Static Files\r\n------------------------------------\r\n\r\n\tcd ~\r\n\tcd gitploy\r\n\t./manage.py syncdb\r\n\t./manage.py migrate\r\n\t./manage.py collectstatic --noinput\r\n\r\n\r\nTest your Django Installation\r\n----------------------------\r\nWow, halfway done. Let's see if everything went right so far.\r\n\r\n\t./manage.py runserver 0.0.0.0:8000\r\n\t\r\nYou see something that is not an error page? Good job, let's continue!\r\n\r\n\r\nConfigure Nginx\r\n---------------\r\nFind the line where it says _server_name_ and change that according to the desired URL of your gitploy installation. We than create a symlink to the sites configuration of nginx.\r\n\r\n\tcd ~\r\n\teditor gitploy/server_conf/gitploy_nginx\r\n\t\r\nWe need to do this as sudo, so exit from the user _gitploy_ and create some symlinks.\r\n\r\n\texit\r\n\tsudo ln -s /home/gitploy/gitploy/server_conf/gitploy_nginx /etc/nginx/sites-available/\r\n\tsudo ln -s /etc/nginx/sites-available/gitploy_nginx /etc/nginx/sites-enabled/\r\n\t\r\nRestart nginx\r\n\r\n\tsudo service nginx restart\r\n\t\r\nYou may have to uncomment _server_names_hash_bucket_size 64_\r\n\t\r\n\teditor /etc/nginx/nginx.conf\r\n\t\r\n\r\n\t\r\nConfigure Supervisor\r\n--------------------\r\nCreate a symlink to the supervisor configuration.\r\n\r\n\tsudo ln -s /home/gitploy/gitploy/server_conf/gitploy_supervisor.conf /etc/supervisor/conf.d/\r\n\t\r\nRestart supervisor\r\n\r\n\tsudo service supervisor restart\r\n\t\r\n\t\r\nDone!\r\n-----\r\n\r\nCongrats! Your installation should now be up and running. Happy Deploying!\r\n\t\r\n\r\n\r\n\t\r\n\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\r\n\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}